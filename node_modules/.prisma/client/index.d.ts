
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: number
  nom: string
  email: string
  password: string
  role: Role
}

/**
 * Model Article
 * 
 */
export type Article = {
  id: number
  titre: string
  contenu: string
  image: string | null
  published: boolean
  createdAt: Date
  updatedAt: Date
  userID: number
}

/**
 * Model Commentaire
 * 
 */
export type Commentaire = {
  id: number
  email: string
  contenu: string
  articleID: number
}

/**
 * Model Categorie
 * 
 */
export type Categorie = {
  id: number
  nom: string
}

/**
 * Model CategorieArticle
 * 
 */
export type CategorieArticle = {
  articleID: number
  categorieID: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Role: {
  ADMIN: 'ADMIN',
  AUTHOR: 'AUTHOR'
};

export type Role = (typeof Role)[keyof typeof Role]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<GlobalReject>;

  /**
   * `prisma.commentaire`: Exposes CRUD operations for the **Commentaire** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commentaires
    * const commentaires = await prisma.commentaire.findMany()
    * ```
    */
  get commentaire(): Prisma.CommentaireDelegate<GlobalReject>;

  /**
   * `prisma.categorie`: Exposes CRUD operations for the **Categorie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categorie.findMany()
    * ```
    */
  get categorie(): Prisma.CategorieDelegate<GlobalReject>;

  /**
   * `prisma.categorieArticle`: Exposes CRUD operations for the **CategorieArticle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategorieArticles
    * const categorieArticles = await prisma.categorieArticle.findMany()
    * ```
    */
  get categorieArticle(): Prisma.CategorieArticleDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.14.0
   * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Article: 'Article',
    Commentaire: 'Commentaire',
    Categorie: 'Categorie',
    CategorieArticle: 'CategorieArticle'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    articles: number
  }

  export type UserCountOutputTypeSelect = {
    articles?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type ArticleCountOutputType
   */


  export type ArticleCountOutputType = {
    commentaires: number
    categories: number
  }

  export type ArticleCountOutputTypeSelect = {
    commentaires?: boolean
    categories?: boolean
  }

  export type ArticleCountOutputTypeGetPayload<S extends boolean | null | undefined | ArticleCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ArticleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ArticleCountOutputTypeArgs)
    ? ArticleCountOutputType 
    : S extends { select: any } & (ArticleCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ArticleCountOutputType ? ArticleCountOutputType[P] : never
  } 
      : ArticleCountOutputType




  // Custom InputTypes

  /**
   * ArticleCountOutputType without action
   */
  export type ArticleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ArticleCountOutputType
     */
    select?: ArticleCountOutputTypeSelect | null
  }



  /**
   * Count Type CategorieCountOutputType
   */


  export type CategorieCountOutputType = {
    articles: number
  }

  export type CategorieCountOutputTypeSelect = {
    articles?: boolean
  }

  export type CategorieCountOutputTypeGetPayload<S extends boolean | null | undefined | CategorieCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategorieCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategorieCountOutputTypeArgs)
    ? CategorieCountOutputType 
    : S extends { select: any } & (CategorieCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategorieCountOutputType ? CategorieCountOutputType[P] : never
  } 
      : CategorieCountOutputType




  // Custom InputTypes

  /**
   * CategorieCountOutputType without action
   */
  export type CategorieCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategorieCountOutputType
     */
    select?: CategorieCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    password: string | null
    role: Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    email: string | null
    password: string | null
    role: Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nom: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nom?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    nom: string
    email: string
    password: string
    role: Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    nom?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    articles?: boolean | User$articlesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    articles?: boolean | User$articlesArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'articles' ? Array < ArticleGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'articles' ? Array < ArticleGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    articles<T extends User$articlesArgs= {}>(args?: Subset<T, User$articlesArgs>): Prisma.PrismaPromise<Array<ArticleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.articles
   */
  export type User$articlesArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    cursor?: ArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Article
   */


  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleAvgAggregateOutputType = {
    id: number | null
    userID: number | null
  }

  export type ArticleSumAggregateOutputType = {
    id: number | null
    userID: number | null
  }

  export type ArticleMinAggregateOutputType = {
    id: number | null
    titre: string | null
    contenu: string | null
    image: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userID: number | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    contenu: string | null
    image: string | null
    published: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userID: number | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    titre: number
    contenu: number
    image: number
    published: number
    createdAt: number
    updatedAt: number
    userID: number
    _all: number
  }


  export type ArticleAvgAggregateInputType = {
    id?: true
    userID?: true
  }

  export type ArticleSumAggregateInputType = {
    id?: true
    userID?: true
  }

  export type ArticleMinAggregateInputType = {
    id?: true
    titre?: true
    contenu?: true
    image?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    userID?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    titre?: true
    contenu?: true
    image?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    userID?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    titre?: true
    contenu?: true
    image?: true
    published?: true
    createdAt?: true
    updatedAt?: true
    userID?: true
    _all?: true
  }

  export type ArticleAggregateArgs = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs = {
    where?: ArticleWhereInput
    orderBy?: Enumerable<ArticleOrderByWithAggregationInput>
    by: ArticleScalarFieldEnum[]
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _avg?: ArticleAvgAggregateInputType
    _sum?: ArticleSumAggregateInputType
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }


  export type ArticleGroupByOutputType = {
    id: number
    titre: string
    contenu: string
    image: string | null
    published: boolean
    createdAt: Date
    updatedAt: Date
    userID: number
    _count: ArticleCountAggregateOutputType | null
    _avg: ArticleAvgAggregateOutputType | null
    _sum: ArticleSumAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect = {
    id?: boolean
    titre?: boolean
    contenu?: boolean
    image?: boolean
    published?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userID?: boolean
    commentaires?: boolean | Article$commentairesArgs
    categories?: boolean | Article$categoriesArgs
    author?: boolean | UserArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  }


  export type ArticleInclude = {
    commentaires?: boolean | Article$commentairesArgs
    categories?: boolean | Article$categoriesArgs
    author?: boolean | UserArgs
    _count?: boolean | ArticleCountOutputTypeArgs
  }

  export type ArticleGetPayload<S extends boolean | null | undefined | ArticleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Article :
    S extends undefined ? never :
    S extends { include: any } & (ArticleArgs | ArticleFindManyArgs)
    ? Article  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'commentaires' ? Array < CommentaireGetPayload<S['include'][P]>>  :
        P extends 'categories' ? Array < CategorieArticleGetPayload<S['include'][P]>>  :
        P extends 'author' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ArticleArgs | ArticleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'commentaires' ? Array < CommentaireGetPayload<S['select'][P]>>  :
        P extends 'categories' ? Array < CategorieArticleGetPayload<S['select'][P]>>  :
        P extends 'author' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? ArticleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Article ? Article[P] : never
  } 
      : Article


  type ArticleCountArgs = 
    Omit<ArticleFindManyArgs, 'select' | 'include'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find one Article that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindUniqueOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Article'> extends True ? Prisma__ArticleClient<ArticleGetPayload<T>> : Prisma__ArticleClient<ArticleGetPayload<T> | null, null>

    /**
     * Find the first Article that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ArticleFindFirstOrThrowArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ArticleFindManyArgs>(
      args?: SelectSubset<T, ArticleFindManyArgs>
    ): Prisma.PrismaPromise<Array<ArticleGetPayload<T>>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
    **/
    create<T extends ArticleCreateArgs>(
      args: SelectSubset<T, ArticleCreateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Create many Articles.
     *     @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     *     @example
     *     // Create many Articles
     *     const article = await prisma.article.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ArticleCreateManyArgs>(
      args?: SelectSubset<T, ArticleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
    **/
    delete<T extends ArticleDeleteArgs>(
      args: SelectSubset<T, ArticleDeleteArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ArticleUpdateArgs>(
      args: SelectSubset<T, ArticleUpdateArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ArticleDeleteManyArgs>(
      args?: SelectSubset<T, ArticleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ArticleUpdateManyArgs>(
      args: SelectSubset<T, ArticleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
    **/
    upsert<T extends ArticleUpsertArgs>(
      args: SelectSubset<T, ArticleUpsertArgs>
    ): Prisma__ArticleClient<ArticleGetPayload<T>>

    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ArticleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    commentaires<T extends Article$commentairesArgs= {}>(args?: Subset<T, Article$commentairesArgs>): Prisma.PrismaPromise<Array<CommentaireGetPayload<T>>| Null>;

    categories<T extends Article$categoriesArgs= {}>(args?: Subset<T, Article$categoriesArgs>): Prisma.PrismaPromise<Array<CategorieArticleGetPayload<T>>| Null>;

    author<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Article base type for findUnique actions
   */
  export type ArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUnique
   */
  export interface ArticleFindUniqueArgs extends ArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article base type for findFirst actions
   */
  export type ArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }

  /**
   * Article findFirst
   */
  export interface ArticleFindFirstArgs extends ArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article findMany
   */
  export type ArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: Enumerable<ArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: Enumerable<ArticleScalarFieldEnum>
  }


  /**
   * Article create
   */
  export type ArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }


  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs = {
    /**
     * The data used to create many Articles.
     */
    data: Enumerable<ArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Article update
   */
  export type ArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
  }


  /**
   * Article upsert
   */
  export type ArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }


  /**
   * Article delete
   */
  export type ArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }


  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
  }


  /**
   * Article.commentaires
   */
  export type Article$commentairesArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    where?: CommentaireWhereInput
    orderBy?: Enumerable<CommentaireOrderByWithRelationInput>
    cursor?: CommentaireWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentaireScalarFieldEnum>
  }


  /**
   * Article.categories
   */
  export type Article$categoriesArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    where?: CategorieArticleWhereInput
    orderBy?: Enumerable<CategorieArticleOrderByWithRelationInput>
    cursor?: CategorieArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CategorieArticleScalarFieldEnum>
  }


  /**
   * Article without action
   */
  export type ArticleArgs = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ArticleInclude | null
  }



  /**
   * Model Commentaire
   */


  export type AggregateCommentaire = {
    _count: CommentaireCountAggregateOutputType | null
    _avg: CommentaireAvgAggregateOutputType | null
    _sum: CommentaireSumAggregateOutputType | null
    _min: CommentaireMinAggregateOutputType | null
    _max: CommentaireMaxAggregateOutputType | null
  }

  export type CommentaireAvgAggregateOutputType = {
    id: number | null
    articleID: number | null
  }

  export type CommentaireSumAggregateOutputType = {
    id: number | null
    articleID: number | null
  }

  export type CommentaireMinAggregateOutputType = {
    id: number | null
    email: string | null
    contenu: string | null
    articleID: number | null
  }

  export type CommentaireMaxAggregateOutputType = {
    id: number | null
    email: string | null
    contenu: string | null
    articleID: number | null
  }

  export type CommentaireCountAggregateOutputType = {
    id: number
    email: number
    contenu: number
    articleID: number
    _all: number
  }


  export type CommentaireAvgAggregateInputType = {
    id?: true
    articleID?: true
  }

  export type CommentaireSumAggregateInputType = {
    id?: true
    articleID?: true
  }

  export type CommentaireMinAggregateInputType = {
    id?: true
    email?: true
    contenu?: true
    articleID?: true
  }

  export type CommentaireMaxAggregateInputType = {
    id?: true
    email?: true
    contenu?: true
    articleID?: true
  }

  export type CommentaireCountAggregateInputType = {
    id?: true
    email?: true
    contenu?: true
    articleID?: true
    _all?: true
  }

  export type CommentaireAggregateArgs = {
    /**
     * Filter which Commentaire to aggregate.
     */
    where?: CommentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaires to fetch.
     */
    orderBy?: Enumerable<CommentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Commentaires
    **/
    _count?: true | CommentaireCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentaireAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentaireSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentaireMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentaireMaxAggregateInputType
  }

  export type GetCommentaireAggregateType<T extends CommentaireAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentaire]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentaire[P]>
      : GetScalarType<T[P], AggregateCommentaire[P]>
  }




  export type CommentaireGroupByArgs = {
    where?: CommentaireWhereInput
    orderBy?: Enumerable<CommentaireOrderByWithAggregationInput>
    by: CommentaireScalarFieldEnum[]
    having?: CommentaireScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentaireCountAggregateInputType | true
    _avg?: CommentaireAvgAggregateInputType
    _sum?: CommentaireSumAggregateInputType
    _min?: CommentaireMinAggregateInputType
    _max?: CommentaireMaxAggregateInputType
  }


  export type CommentaireGroupByOutputType = {
    id: number
    email: string
    contenu: string
    articleID: number
    _count: CommentaireCountAggregateOutputType | null
    _avg: CommentaireAvgAggregateOutputType | null
    _sum: CommentaireSumAggregateOutputType | null
    _min: CommentaireMinAggregateOutputType | null
    _max: CommentaireMaxAggregateOutputType | null
  }

  type GetCommentaireGroupByPayload<T extends CommentaireGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommentaireGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentaireGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentaireGroupByOutputType[P]>
            : GetScalarType<T[P], CommentaireGroupByOutputType[P]>
        }
      >
    >


  export type CommentaireSelect = {
    id?: boolean
    email?: boolean
    contenu?: boolean
    articleID?: boolean
    article?: boolean | ArticleArgs
  }


  export type CommentaireInclude = {
    article?: boolean | ArticleArgs
  }

  export type CommentaireGetPayload<S extends boolean | null | undefined | CommentaireArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Commentaire :
    S extends undefined ? never :
    S extends { include: any } & (CommentaireArgs | CommentaireFindManyArgs)
    ? Commentaire  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'article' ? ArticleGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommentaireArgs | CommentaireFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'article' ? ArticleGetPayload<S['select'][P]> :  P extends keyof Commentaire ? Commentaire[P] : never
  } 
      : Commentaire


  type CommentaireCountArgs = 
    Omit<CommentaireFindManyArgs, 'select' | 'include'> & {
      select?: CommentaireCountAggregateInputType | true
    }

  export interface CommentaireDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Commentaire that matches the filter.
     * @param {CommentaireFindUniqueArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentaireFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentaireFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Commentaire'> extends True ? Prisma__CommentaireClient<CommentaireGetPayload<T>> : Prisma__CommentaireClient<CommentaireGetPayload<T> | null, null>

    /**
     * Find one Commentaire that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentaireFindUniqueOrThrowArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentaireFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentaireFindUniqueOrThrowArgs>
    ): Prisma__CommentaireClient<CommentaireGetPayload<T>>

    /**
     * Find the first Commentaire that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFindFirstArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentaireFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentaireFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Commentaire'> extends True ? Prisma__CommentaireClient<CommentaireGetPayload<T>> : Prisma__CommentaireClient<CommentaireGetPayload<T> | null, null>

    /**
     * Find the first Commentaire that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFindFirstOrThrowArgs} args - Arguments to find a Commentaire
     * @example
     * // Get one Commentaire
     * const commentaire = await prisma.commentaire.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentaireFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentaireFindFirstOrThrowArgs>
    ): Prisma__CommentaireClient<CommentaireGetPayload<T>>

    /**
     * Find zero or more Commentaires that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commentaires
     * const commentaires = await prisma.commentaire.findMany()
     * 
     * // Get first 10 Commentaires
     * const commentaires = await prisma.commentaire.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentaireWithIdOnly = await prisma.commentaire.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentaireFindManyArgs>(
      args?: SelectSubset<T, CommentaireFindManyArgs>
    ): Prisma.PrismaPromise<Array<CommentaireGetPayload<T>>>

    /**
     * Create a Commentaire.
     * @param {CommentaireCreateArgs} args - Arguments to create a Commentaire.
     * @example
     * // Create one Commentaire
     * const Commentaire = await prisma.commentaire.create({
     *   data: {
     *     // ... data to create a Commentaire
     *   }
     * })
     * 
    **/
    create<T extends CommentaireCreateArgs>(
      args: SelectSubset<T, CommentaireCreateArgs>
    ): Prisma__CommentaireClient<CommentaireGetPayload<T>>

    /**
     * Create many Commentaires.
     *     @param {CommentaireCreateManyArgs} args - Arguments to create many Commentaires.
     *     @example
     *     // Create many Commentaires
     *     const commentaire = await prisma.commentaire.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentaireCreateManyArgs>(
      args?: SelectSubset<T, CommentaireCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Commentaire.
     * @param {CommentaireDeleteArgs} args - Arguments to delete one Commentaire.
     * @example
     * // Delete one Commentaire
     * const Commentaire = await prisma.commentaire.delete({
     *   where: {
     *     // ... filter to delete one Commentaire
     *   }
     * })
     * 
    **/
    delete<T extends CommentaireDeleteArgs>(
      args: SelectSubset<T, CommentaireDeleteArgs>
    ): Prisma__CommentaireClient<CommentaireGetPayload<T>>

    /**
     * Update one Commentaire.
     * @param {CommentaireUpdateArgs} args - Arguments to update one Commentaire.
     * @example
     * // Update one Commentaire
     * const commentaire = await prisma.commentaire.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentaireUpdateArgs>(
      args: SelectSubset<T, CommentaireUpdateArgs>
    ): Prisma__CommentaireClient<CommentaireGetPayload<T>>

    /**
     * Delete zero or more Commentaires.
     * @param {CommentaireDeleteManyArgs} args - Arguments to filter Commentaires to delete.
     * @example
     * // Delete a few Commentaires
     * const { count } = await prisma.commentaire.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentaireDeleteManyArgs>(
      args?: SelectSubset<T, CommentaireDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commentaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commentaires
     * const commentaire = await prisma.commentaire.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentaireUpdateManyArgs>(
      args: SelectSubset<T, CommentaireUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Commentaire.
     * @param {CommentaireUpsertArgs} args - Arguments to update or create a Commentaire.
     * @example
     * // Update or create a Commentaire
     * const commentaire = await prisma.commentaire.upsert({
     *   create: {
     *     // ... data to create a Commentaire
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commentaire we want to update
     *   }
     * })
    **/
    upsert<T extends CommentaireUpsertArgs>(
      args: SelectSubset<T, CommentaireUpsertArgs>
    ): Prisma__CommentaireClient<CommentaireGetPayload<T>>

    /**
     * Count the number of Commentaires.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireCountArgs} args - Arguments to filter Commentaires to count.
     * @example
     * // Count the number of Commentaires
     * const count = await prisma.commentaire.count({
     *   where: {
     *     // ... the filter for the Commentaires we want to count
     *   }
     * })
    **/
    count<T extends CommentaireCountArgs>(
      args?: Subset<T, CommentaireCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentaireCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commentaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentaireAggregateArgs>(args: Subset<T, CommentaireAggregateArgs>): Prisma.PrismaPromise<GetCommentaireAggregateType<T>>

    /**
     * Group by Commentaire.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentaireGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentaireGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentaireGroupByArgs['orderBy'] }
        : { orderBy?: CommentaireGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Commentaire.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentaireClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    article<T extends ArticleArgs= {}>(args?: Subset<T, ArticleArgs>): Prisma__ArticleClient<ArticleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Commentaire base type for findUnique actions
   */
  export type CommentaireFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * Filter, which Commentaire to fetch.
     */
    where: CommentaireWhereUniqueInput
  }

  /**
   * Commentaire findUnique
   */
  export interface CommentaireFindUniqueArgs extends CommentaireFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Commentaire findUniqueOrThrow
   */
  export type CommentaireFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * Filter, which Commentaire to fetch.
     */
    where: CommentaireWhereUniqueInput
  }


  /**
   * Commentaire base type for findFirst actions
   */
  export type CommentaireFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * Filter, which Commentaire to fetch.
     */
    where?: CommentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaires to fetch.
     */
    orderBy?: Enumerable<CommentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commentaires.
     */
    cursor?: CommentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commentaires.
     */
    distinct?: Enumerable<CommentaireScalarFieldEnum>
  }

  /**
   * Commentaire findFirst
   */
  export interface CommentaireFindFirstArgs extends CommentaireFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Commentaire findFirstOrThrow
   */
  export type CommentaireFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * Filter, which Commentaire to fetch.
     */
    where?: CommentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaires to fetch.
     */
    orderBy?: Enumerable<CommentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commentaires.
     */
    cursor?: CommentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaires.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commentaires.
     */
    distinct?: Enumerable<CommentaireScalarFieldEnum>
  }


  /**
   * Commentaire findMany
   */
  export type CommentaireFindManyArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * Filter, which Commentaires to fetch.
     */
    where?: CommentaireWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaires to fetch.
     */
    orderBy?: Enumerable<CommentaireOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Commentaires.
     */
    cursor?: CommentaireWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaires from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaires.
     */
    skip?: number
    distinct?: Enumerable<CommentaireScalarFieldEnum>
  }


  /**
   * Commentaire create
   */
  export type CommentaireCreateArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * The data needed to create a Commentaire.
     */
    data: XOR<CommentaireCreateInput, CommentaireUncheckedCreateInput>
  }


  /**
   * Commentaire createMany
   */
  export type CommentaireCreateManyArgs = {
    /**
     * The data used to create many Commentaires.
     */
    data: Enumerable<CommentaireCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Commentaire update
   */
  export type CommentaireUpdateArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * The data needed to update a Commentaire.
     */
    data: XOR<CommentaireUpdateInput, CommentaireUncheckedUpdateInput>
    /**
     * Choose, which Commentaire to update.
     */
    where: CommentaireWhereUniqueInput
  }


  /**
   * Commentaire updateMany
   */
  export type CommentaireUpdateManyArgs = {
    /**
     * The data used to update Commentaires.
     */
    data: XOR<CommentaireUpdateManyMutationInput, CommentaireUncheckedUpdateManyInput>
    /**
     * Filter which Commentaires to update
     */
    where?: CommentaireWhereInput
  }


  /**
   * Commentaire upsert
   */
  export type CommentaireUpsertArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * The filter to search for the Commentaire to update in case it exists.
     */
    where: CommentaireWhereUniqueInput
    /**
     * In case the Commentaire found by the `where` argument doesn't exist, create a new Commentaire with this data.
     */
    create: XOR<CommentaireCreateInput, CommentaireUncheckedCreateInput>
    /**
     * In case the Commentaire was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentaireUpdateInput, CommentaireUncheckedUpdateInput>
  }


  /**
   * Commentaire delete
   */
  export type CommentaireDeleteArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
    /**
     * Filter which Commentaire to delete.
     */
    where: CommentaireWhereUniqueInput
  }


  /**
   * Commentaire deleteMany
   */
  export type CommentaireDeleteManyArgs = {
    /**
     * Filter which Commentaires to delete
     */
    where?: CommentaireWhereInput
  }


  /**
   * Commentaire without action
   */
  export type CommentaireArgs = {
    /**
     * Select specific fields to fetch from the Commentaire
     */
    select?: CommentaireSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentaireInclude | null
  }



  /**
   * Model Categorie
   */


  export type AggregateCategorie = {
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  export type CategorieAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorieSumAggregateOutputType = {
    id: number | null
  }

  export type CategorieMinAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type CategorieMaxAggregateOutputType = {
    id: number | null
    nom: string | null
  }

  export type CategorieCountAggregateOutputType = {
    id: number
    nom: number
    _all: number
  }


  export type CategorieAvgAggregateInputType = {
    id?: true
  }

  export type CategorieSumAggregateInputType = {
    id?: true
  }

  export type CategorieMinAggregateInputType = {
    id?: true
    nom?: true
  }

  export type CategorieMaxAggregateInputType = {
    id?: true
    nom?: true
  }

  export type CategorieCountAggregateInputType = {
    id?: true
    nom?: true
    _all?: true
  }

  export type CategorieAggregateArgs = {
    /**
     * Filter which Categorie to aggregate.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategorieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieMaxAggregateInputType
  }

  export type GetCategorieAggregateType<T extends CategorieAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorie[P]>
      : GetScalarType<T[P], AggregateCategorie[P]>
  }




  export type CategorieGroupByArgs = {
    where?: CategorieWhereInput
    orderBy?: Enumerable<CategorieOrderByWithAggregationInput>
    by: CategorieScalarFieldEnum[]
    having?: CategorieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieCountAggregateInputType | true
    _avg?: CategorieAvgAggregateInputType
    _sum?: CategorieSumAggregateInputType
    _min?: CategorieMinAggregateInputType
    _max?: CategorieMaxAggregateInputType
  }


  export type CategorieGroupByOutputType = {
    id: number
    nom: string
    _count: CategorieCountAggregateOutputType | null
    _avg: CategorieAvgAggregateOutputType | null
    _sum: CategorieSumAggregateOutputType | null
    _min: CategorieMinAggregateOutputType | null
    _max: CategorieMaxAggregateOutputType | null
  }

  type GetCategorieGroupByPayload<T extends CategorieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategorieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieGroupByOutputType[P]>
        }
      >
    >


  export type CategorieSelect = {
    id?: boolean
    nom?: boolean
    articles?: boolean | Categorie$articlesArgs
    _count?: boolean | CategorieCountOutputTypeArgs
  }


  export type CategorieInclude = {
    articles?: boolean | Categorie$articlesArgs
    _count?: boolean | CategorieCountOutputTypeArgs
  }

  export type CategorieGetPayload<S extends boolean | null | undefined | CategorieArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Categorie :
    S extends undefined ? never :
    S extends { include: any } & (CategorieArgs | CategorieFindManyArgs)
    ? Categorie  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'articles' ? Array < CategorieArticleGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategorieCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategorieArgs | CategorieFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'articles' ? Array < CategorieArticleGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategorieCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Categorie ? Categorie[P] : never
  } 
      : Categorie


  type CategorieCountArgs = 
    Omit<CategorieFindManyArgs, 'select' | 'include'> & {
      select?: CategorieCountAggregateInputType | true
    }

  export interface CategorieDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Categorie that matches the filter.
     * @param {CategorieFindUniqueArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategorieFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategorieFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Categorie'> extends True ? Prisma__CategorieClient<CategorieGetPayload<T>> : Prisma__CategorieClient<CategorieGetPayload<T> | null, null>

    /**
     * Find one Categorie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategorieFindUniqueOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategorieFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategorieFindUniqueOrThrowArgs>
    ): Prisma__CategorieClient<CategorieGetPayload<T>>

    /**
     * Find the first Categorie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategorieFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategorieFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Categorie'> extends True ? Prisma__CategorieClient<CategorieGetPayload<T>> : Prisma__CategorieClient<CategorieGetPayload<T> | null, null>

    /**
     * Find the first Categorie that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindFirstOrThrowArgs} args - Arguments to find a Categorie
     * @example
     * // Get one Categorie
     * const categorie = await prisma.categorie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategorieFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategorieFindFirstOrThrowArgs>
    ): Prisma__CategorieClient<CategorieGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categorie.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categorie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categorieWithIdOnly = await prisma.categorie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategorieFindManyArgs>(
      args?: SelectSubset<T, CategorieFindManyArgs>
    ): Prisma.PrismaPromise<Array<CategorieGetPayload<T>>>

    /**
     * Create a Categorie.
     * @param {CategorieCreateArgs} args - Arguments to create a Categorie.
     * @example
     * // Create one Categorie
     * const Categorie = await prisma.categorie.create({
     *   data: {
     *     // ... data to create a Categorie
     *   }
     * })
     * 
    **/
    create<T extends CategorieCreateArgs>(
      args: SelectSubset<T, CategorieCreateArgs>
    ): Prisma__CategorieClient<CategorieGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategorieCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categorie = await prisma.categorie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategorieCreateManyArgs>(
      args?: SelectSubset<T, CategorieCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categorie.
     * @param {CategorieDeleteArgs} args - Arguments to delete one Categorie.
     * @example
     * // Delete one Categorie
     * const Categorie = await prisma.categorie.delete({
     *   where: {
     *     // ... filter to delete one Categorie
     *   }
     * })
     * 
    **/
    delete<T extends CategorieDeleteArgs>(
      args: SelectSubset<T, CategorieDeleteArgs>
    ): Prisma__CategorieClient<CategorieGetPayload<T>>

    /**
     * Update one Categorie.
     * @param {CategorieUpdateArgs} args - Arguments to update one Categorie.
     * @example
     * // Update one Categorie
     * const categorie = await prisma.categorie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategorieUpdateArgs>(
      args: SelectSubset<T, CategorieUpdateArgs>
    ): Prisma__CategorieClient<CategorieGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategorieDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categorie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategorieDeleteManyArgs>(
      args?: SelectSubset<T, CategorieDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categorie = await prisma.categorie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategorieUpdateManyArgs>(
      args: SelectSubset<T, CategorieUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categorie.
     * @param {CategorieUpsertArgs} args - Arguments to update or create a Categorie.
     * @example
     * // Update or create a Categorie
     * const categorie = await prisma.categorie.upsert({
     *   create: {
     *     // ... data to create a Categorie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categorie we want to update
     *   }
     * })
    **/
    upsert<T extends CategorieUpsertArgs>(
      args: SelectSubset<T, CategorieUpsertArgs>
    ): Prisma__CategorieClient<CategorieGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categorie.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategorieCountArgs>(
      args?: Subset<T, CategorieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieAggregateArgs>(args: Subset<T, CategorieAggregateArgs>): Prisma.PrismaPromise<GetCategorieAggregateType<T>>

    /**
     * Group by Categorie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieGroupByArgs['orderBy'] }
        : { orderBy?: CategorieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Categorie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategorieClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    articles<T extends Categorie$articlesArgs= {}>(args?: Subset<T, Categorie$articlesArgs>): Prisma.PrismaPromise<Array<CategorieArticleGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Categorie base type for findUnique actions
   */
  export type CategorieFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }

  /**
   * Categorie findUnique
   */
  export interface CategorieFindUniqueArgs extends CategorieFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categorie findUniqueOrThrow
   */
  export type CategorieFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * Filter, which Categorie to fetch.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie base type for findFirst actions
   */
  export type CategorieFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategorieScalarFieldEnum>
  }

  /**
   * Categorie findFirst
   */
  export interface CategorieFindFirstArgs extends CategorieFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Categorie findFirstOrThrow
   */
  export type CategorieFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * Filter, which Categorie to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: Enumerable<CategorieScalarFieldEnum>
  }


  /**
   * Categorie findMany
   */
  export type CategorieFindManyArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategorieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: Enumerable<CategorieOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategorieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: Enumerable<CategorieScalarFieldEnum>
  }


  /**
   * Categorie create
   */
  export type CategorieCreateArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * The data needed to create a Categorie.
     */
    data: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
  }


  /**
   * Categorie createMany
   */
  export type CategorieCreateManyArgs = {
    /**
     * The data used to create many Categories.
     */
    data: Enumerable<CategorieCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Categorie update
   */
  export type CategorieUpdateArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * The data needed to update a Categorie.
     */
    data: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
    /**
     * Choose, which Categorie to update.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie updateMany
   */
  export type CategorieUpdateManyArgs = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategorieUpdateManyMutationInput, CategorieUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategorieWhereInput
  }


  /**
   * Categorie upsert
   */
  export type CategorieUpsertArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * The filter to search for the Categorie to update in case it exists.
     */
    where: CategorieWhereUniqueInput
    /**
     * In case the Categorie found by the `where` argument doesn't exist, create a new Categorie with this data.
     */
    create: XOR<CategorieCreateInput, CategorieUncheckedCreateInput>
    /**
     * In case the Categorie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorieUpdateInput, CategorieUncheckedUpdateInput>
  }


  /**
   * Categorie delete
   */
  export type CategorieDeleteArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
    /**
     * Filter which Categorie to delete.
     */
    where: CategorieWhereUniqueInput
  }


  /**
   * Categorie deleteMany
   */
  export type CategorieDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     */
    where?: CategorieWhereInput
  }


  /**
   * Categorie.articles
   */
  export type Categorie$articlesArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    where?: CategorieArticleWhereInput
    orderBy?: Enumerable<CategorieArticleOrderByWithRelationInput>
    cursor?: CategorieArticleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CategorieArticleScalarFieldEnum>
  }


  /**
   * Categorie without action
   */
  export type CategorieArgs = {
    /**
     * Select specific fields to fetch from the Categorie
     */
    select?: CategorieSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieInclude | null
  }



  /**
   * Model CategorieArticle
   */


  export type AggregateCategorieArticle = {
    _count: CategorieArticleCountAggregateOutputType | null
    _avg: CategorieArticleAvgAggregateOutputType | null
    _sum: CategorieArticleSumAggregateOutputType | null
    _min: CategorieArticleMinAggregateOutputType | null
    _max: CategorieArticleMaxAggregateOutputType | null
  }

  export type CategorieArticleAvgAggregateOutputType = {
    articleID: number | null
    categorieID: number | null
  }

  export type CategorieArticleSumAggregateOutputType = {
    articleID: number | null
    categorieID: number | null
  }

  export type CategorieArticleMinAggregateOutputType = {
    articleID: number | null
    categorieID: number | null
  }

  export type CategorieArticleMaxAggregateOutputType = {
    articleID: number | null
    categorieID: number | null
  }

  export type CategorieArticleCountAggregateOutputType = {
    articleID: number
    categorieID: number
    _all: number
  }


  export type CategorieArticleAvgAggregateInputType = {
    articleID?: true
    categorieID?: true
  }

  export type CategorieArticleSumAggregateInputType = {
    articleID?: true
    categorieID?: true
  }

  export type CategorieArticleMinAggregateInputType = {
    articleID?: true
    categorieID?: true
  }

  export type CategorieArticleMaxAggregateInputType = {
    articleID?: true
    categorieID?: true
  }

  export type CategorieArticleCountAggregateInputType = {
    articleID?: true
    categorieID?: true
    _all?: true
  }

  export type CategorieArticleAggregateArgs = {
    /**
     * Filter which CategorieArticle to aggregate.
     */
    where?: CategorieArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorieArticles to fetch.
     */
    orderBy?: Enumerable<CategorieArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategorieArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorieArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorieArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategorieArticles
    **/
    _count?: true | CategorieArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategorieArticleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorieArticleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategorieArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategorieArticleMaxAggregateInputType
  }

  export type GetCategorieArticleAggregateType<T extends CategorieArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateCategorieArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategorieArticle[P]>
      : GetScalarType<T[P], AggregateCategorieArticle[P]>
  }




  export type CategorieArticleGroupByArgs = {
    where?: CategorieArticleWhereInput
    orderBy?: Enumerable<CategorieArticleOrderByWithAggregationInput>
    by: CategorieArticleScalarFieldEnum[]
    having?: CategorieArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategorieArticleCountAggregateInputType | true
    _avg?: CategorieArticleAvgAggregateInputType
    _sum?: CategorieArticleSumAggregateInputType
    _min?: CategorieArticleMinAggregateInputType
    _max?: CategorieArticleMaxAggregateInputType
  }


  export type CategorieArticleGroupByOutputType = {
    articleID: number
    categorieID: number
    _count: CategorieArticleCountAggregateOutputType | null
    _avg: CategorieArticleAvgAggregateOutputType | null
    _sum: CategorieArticleSumAggregateOutputType | null
    _min: CategorieArticleMinAggregateOutputType | null
    _max: CategorieArticleMaxAggregateOutputType | null
  }

  type GetCategorieArticleGroupByPayload<T extends CategorieArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CategorieArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategorieArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategorieArticleGroupByOutputType[P]>
            : GetScalarType<T[P], CategorieArticleGroupByOutputType[P]>
        }
      >
    >


  export type CategorieArticleSelect = {
    articleID?: boolean
    categorieID?: boolean
    articles?: boolean | ArticleArgs
    categories?: boolean | CategorieArgs
  }


  export type CategorieArticleInclude = {
    articles?: boolean | ArticleArgs
    categories?: boolean | CategorieArgs
  }

  export type CategorieArticleGetPayload<S extends boolean | null | undefined | CategorieArticleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategorieArticle :
    S extends undefined ? never :
    S extends { include: any } & (CategorieArticleArgs | CategorieArticleFindManyArgs)
    ? CategorieArticle  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'articles' ? ArticleGetPayload<S['include'][P]> :
        P extends 'categories' ? CategorieGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategorieArticleArgs | CategorieArticleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'articles' ? ArticleGetPayload<S['select'][P]> :
        P extends 'categories' ? CategorieGetPayload<S['select'][P]> :  P extends keyof CategorieArticle ? CategorieArticle[P] : never
  } 
      : CategorieArticle


  type CategorieArticleCountArgs = 
    Omit<CategorieArticleFindManyArgs, 'select' | 'include'> & {
      select?: CategorieArticleCountAggregateInputType | true
    }

  export interface CategorieArticleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one CategorieArticle that matches the filter.
     * @param {CategorieArticleFindUniqueArgs} args - Arguments to find a CategorieArticle
     * @example
     * // Get one CategorieArticle
     * const categorieArticle = await prisma.categorieArticle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategorieArticleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategorieArticleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CategorieArticle'> extends True ? Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>> : Prisma__CategorieArticleClient<CategorieArticleGetPayload<T> | null, null>

    /**
     * Find one CategorieArticle that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategorieArticleFindUniqueOrThrowArgs} args - Arguments to find a CategorieArticle
     * @example
     * // Get one CategorieArticle
     * const categorieArticle = await prisma.categorieArticle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategorieArticleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategorieArticleFindUniqueOrThrowArgs>
    ): Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>>

    /**
     * Find the first CategorieArticle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleFindFirstArgs} args - Arguments to find a CategorieArticle
     * @example
     * // Get one CategorieArticle
     * const categorieArticle = await prisma.categorieArticle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategorieArticleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategorieArticleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CategorieArticle'> extends True ? Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>> : Prisma__CategorieArticleClient<CategorieArticleGetPayload<T> | null, null>

    /**
     * Find the first CategorieArticle that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleFindFirstOrThrowArgs} args - Arguments to find a CategorieArticle
     * @example
     * // Get one CategorieArticle
     * const categorieArticle = await prisma.categorieArticle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategorieArticleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategorieArticleFindFirstOrThrowArgs>
    ): Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>>

    /**
     * Find zero or more CategorieArticles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategorieArticles
     * const categorieArticles = await prisma.categorieArticle.findMany()
     * 
     * // Get first 10 CategorieArticles
     * const categorieArticles = await prisma.categorieArticle.findMany({ take: 10 })
     * 
     * // Only select the `articleID`
     * const categorieArticleWithArticleIDOnly = await prisma.categorieArticle.findMany({ select: { articleID: true } })
     * 
    **/
    findMany<T extends CategorieArticleFindManyArgs>(
      args?: SelectSubset<T, CategorieArticleFindManyArgs>
    ): Prisma.PrismaPromise<Array<CategorieArticleGetPayload<T>>>

    /**
     * Create a CategorieArticle.
     * @param {CategorieArticleCreateArgs} args - Arguments to create a CategorieArticle.
     * @example
     * // Create one CategorieArticle
     * const CategorieArticle = await prisma.categorieArticle.create({
     *   data: {
     *     // ... data to create a CategorieArticle
     *   }
     * })
     * 
    **/
    create<T extends CategorieArticleCreateArgs>(
      args: SelectSubset<T, CategorieArticleCreateArgs>
    ): Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>>

    /**
     * Create many CategorieArticles.
     *     @param {CategorieArticleCreateManyArgs} args - Arguments to create many CategorieArticles.
     *     @example
     *     // Create many CategorieArticles
     *     const categorieArticle = await prisma.categorieArticle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategorieArticleCreateManyArgs>(
      args?: SelectSubset<T, CategorieArticleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategorieArticle.
     * @param {CategorieArticleDeleteArgs} args - Arguments to delete one CategorieArticle.
     * @example
     * // Delete one CategorieArticle
     * const CategorieArticle = await prisma.categorieArticle.delete({
     *   where: {
     *     // ... filter to delete one CategorieArticle
     *   }
     * })
     * 
    **/
    delete<T extends CategorieArticleDeleteArgs>(
      args: SelectSubset<T, CategorieArticleDeleteArgs>
    ): Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>>

    /**
     * Update one CategorieArticle.
     * @param {CategorieArticleUpdateArgs} args - Arguments to update one CategorieArticle.
     * @example
     * // Update one CategorieArticle
     * const categorieArticle = await prisma.categorieArticle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategorieArticleUpdateArgs>(
      args: SelectSubset<T, CategorieArticleUpdateArgs>
    ): Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>>

    /**
     * Delete zero or more CategorieArticles.
     * @param {CategorieArticleDeleteManyArgs} args - Arguments to filter CategorieArticles to delete.
     * @example
     * // Delete a few CategorieArticles
     * const { count } = await prisma.categorieArticle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategorieArticleDeleteManyArgs>(
      args?: SelectSubset<T, CategorieArticleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategorieArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategorieArticles
     * const categorieArticle = await prisma.categorieArticle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategorieArticleUpdateManyArgs>(
      args: SelectSubset<T, CategorieArticleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategorieArticle.
     * @param {CategorieArticleUpsertArgs} args - Arguments to update or create a CategorieArticle.
     * @example
     * // Update or create a CategorieArticle
     * const categorieArticle = await prisma.categorieArticle.upsert({
     *   create: {
     *     // ... data to create a CategorieArticle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategorieArticle we want to update
     *   }
     * })
    **/
    upsert<T extends CategorieArticleUpsertArgs>(
      args: SelectSubset<T, CategorieArticleUpsertArgs>
    ): Prisma__CategorieArticleClient<CategorieArticleGetPayload<T>>

    /**
     * Count the number of CategorieArticles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleCountArgs} args - Arguments to filter CategorieArticles to count.
     * @example
     * // Count the number of CategorieArticles
     * const count = await prisma.categorieArticle.count({
     *   where: {
     *     // ... the filter for the CategorieArticles we want to count
     *   }
     * })
    **/
    count<T extends CategorieArticleCountArgs>(
      args?: Subset<T, CategorieArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategorieArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategorieArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategorieArticleAggregateArgs>(args: Subset<T, CategorieArticleAggregateArgs>): Prisma.PrismaPromise<GetCategorieArticleAggregateType<T>>

    /**
     * Group by CategorieArticle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategorieArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategorieArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategorieArticleGroupByArgs['orderBy'] }
        : { orderBy?: CategorieArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategorieArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategorieArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CategorieArticle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategorieArticleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    articles<T extends ArticleArgs= {}>(args?: Subset<T, ArticleArgs>): Prisma__ArticleClient<ArticleGetPayload<T> | Null>;

    categories<T extends CategorieArgs= {}>(args?: Subset<T, CategorieArgs>): Prisma__CategorieClient<CategorieGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CategorieArticle base type for findUnique actions
   */
  export type CategorieArticleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * Filter, which CategorieArticle to fetch.
     */
    where: CategorieArticleWhereUniqueInput
  }

  /**
   * CategorieArticle findUnique
   */
  export interface CategorieArticleFindUniqueArgs extends CategorieArticleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategorieArticle findUniqueOrThrow
   */
  export type CategorieArticleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * Filter, which CategorieArticle to fetch.
     */
    where: CategorieArticleWhereUniqueInput
  }


  /**
   * CategorieArticle base type for findFirst actions
   */
  export type CategorieArticleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * Filter, which CategorieArticle to fetch.
     */
    where?: CategorieArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorieArticles to fetch.
     */
    orderBy?: Enumerable<CategorieArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategorieArticles.
     */
    cursor?: CategorieArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorieArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorieArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategorieArticles.
     */
    distinct?: Enumerable<CategorieArticleScalarFieldEnum>
  }

  /**
   * CategorieArticle findFirst
   */
  export interface CategorieArticleFindFirstArgs extends CategorieArticleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CategorieArticle findFirstOrThrow
   */
  export type CategorieArticleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * Filter, which CategorieArticle to fetch.
     */
    where?: CategorieArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorieArticles to fetch.
     */
    orderBy?: Enumerable<CategorieArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategorieArticles.
     */
    cursor?: CategorieArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorieArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorieArticles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategorieArticles.
     */
    distinct?: Enumerable<CategorieArticleScalarFieldEnum>
  }


  /**
   * CategorieArticle findMany
   */
  export type CategorieArticleFindManyArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * Filter, which CategorieArticles to fetch.
     */
    where?: CategorieArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategorieArticles to fetch.
     */
    orderBy?: Enumerable<CategorieArticleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategorieArticles.
     */
    cursor?: CategorieArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategorieArticles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategorieArticles.
     */
    skip?: number
    distinct?: Enumerable<CategorieArticleScalarFieldEnum>
  }


  /**
   * CategorieArticle create
   */
  export type CategorieArticleCreateArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * The data needed to create a CategorieArticle.
     */
    data: XOR<CategorieArticleCreateInput, CategorieArticleUncheckedCreateInput>
  }


  /**
   * CategorieArticle createMany
   */
  export type CategorieArticleCreateManyArgs = {
    /**
     * The data used to create many CategorieArticles.
     */
    data: Enumerable<CategorieArticleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CategorieArticle update
   */
  export type CategorieArticleUpdateArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * The data needed to update a CategorieArticle.
     */
    data: XOR<CategorieArticleUpdateInput, CategorieArticleUncheckedUpdateInput>
    /**
     * Choose, which CategorieArticle to update.
     */
    where: CategorieArticleWhereUniqueInput
  }


  /**
   * CategorieArticle updateMany
   */
  export type CategorieArticleUpdateManyArgs = {
    /**
     * The data used to update CategorieArticles.
     */
    data: XOR<CategorieArticleUpdateManyMutationInput, CategorieArticleUncheckedUpdateManyInput>
    /**
     * Filter which CategorieArticles to update
     */
    where?: CategorieArticleWhereInput
  }


  /**
   * CategorieArticle upsert
   */
  export type CategorieArticleUpsertArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * The filter to search for the CategorieArticle to update in case it exists.
     */
    where: CategorieArticleWhereUniqueInput
    /**
     * In case the CategorieArticle found by the `where` argument doesn't exist, create a new CategorieArticle with this data.
     */
    create: XOR<CategorieArticleCreateInput, CategorieArticleUncheckedCreateInput>
    /**
     * In case the CategorieArticle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategorieArticleUpdateInput, CategorieArticleUncheckedUpdateInput>
  }


  /**
   * CategorieArticle delete
   */
  export type CategorieArticleDeleteArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
    /**
     * Filter which CategorieArticle to delete.
     */
    where: CategorieArticleWhereUniqueInput
  }


  /**
   * CategorieArticle deleteMany
   */
  export type CategorieArticleDeleteManyArgs = {
    /**
     * Filter which CategorieArticles to delete
     */
    where?: CategorieArticleWhereInput
  }


  /**
   * CategorieArticle without action
   */
  export type CategorieArticleArgs = {
    /**
     * Select specific fields to fetch from the CategorieArticle
     */
    select?: CategorieArticleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CategorieArticleInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArticleScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    contenu: 'contenu',
    image: 'image',
    published: 'published',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userID: 'userID'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const CategorieArticleScalarFieldEnum: {
    articleID: 'articleID',
    categorieID: 'categorieID'
  };

  export type CategorieArticleScalarFieldEnum = (typeof CategorieArticleScalarFieldEnum)[keyof typeof CategorieArticleScalarFieldEnum]


  export const CategorieScalarFieldEnum: {
    id: 'id',
    nom: 'nom'
  };

  export type CategorieScalarFieldEnum = (typeof CategorieScalarFieldEnum)[keyof typeof CategorieScalarFieldEnum]


  export const CommentaireScalarFieldEnum: {
    id: 'id',
    email: 'email',
    contenu: 'contenu',
    articleID: 'articleID'
  };

  export type CommentaireScalarFieldEnum = (typeof CommentaireScalarFieldEnum)[keyof typeof CommentaireScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    nom?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: EnumRoleFilter | Role
    articles?: ArticleListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    articles?: ArticleOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nom?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: EnumRoleWithAggregatesFilter | Role
  }

  export type ArticleWhereInput = {
    AND?: Enumerable<ArticleWhereInput>
    OR?: Enumerable<ArticleWhereInput>
    NOT?: Enumerable<ArticleWhereInput>
    id?: IntFilter | number
    titre?: StringFilter | string
    contenu?: StringFilter | string
    image?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userID?: IntFilter | number
    commentaires?: CommentaireListRelationFilter
    categories?: CategorieArticleListRelationFilter
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    image?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userID?: SortOrder
    commentaires?: CommentaireOrderByRelationAggregateInput
    categories?: CategorieArticleOrderByRelationAggregateInput
    author?: UserOrderByWithRelationInput
  }

  export type ArticleWhereUniqueInput = {
    id?: number
  }

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    image?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userID?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _avg?: ArticleAvgOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
    _sum?: ArticleSumOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ArticleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    titre?: StringWithAggregatesFilter | string
    contenu?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    published?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    userID?: IntWithAggregatesFilter | number
  }

  export type CommentaireWhereInput = {
    AND?: Enumerable<CommentaireWhereInput>
    OR?: Enumerable<CommentaireWhereInput>
    NOT?: Enumerable<CommentaireWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    contenu?: StringFilter | string
    articleID?: IntFilter | number
    article?: XOR<ArticleRelationFilter, ArticleWhereInput>
  }

  export type CommentaireOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    contenu?: SortOrder
    articleID?: SortOrder
    article?: ArticleOrderByWithRelationInput
  }

  export type CommentaireWhereUniqueInput = {
    id?: number
  }

  export type CommentaireOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    contenu?: SortOrder
    articleID?: SortOrder
    _count?: CommentaireCountOrderByAggregateInput
    _avg?: CommentaireAvgOrderByAggregateInput
    _max?: CommentaireMaxOrderByAggregateInput
    _min?: CommentaireMinOrderByAggregateInput
    _sum?: CommentaireSumOrderByAggregateInput
  }

  export type CommentaireScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentaireScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentaireScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentaireScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    contenu?: StringWithAggregatesFilter | string
    articleID?: IntWithAggregatesFilter | number
  }

  export type CategorieWhereInput = {
    AND?: Enumerable<CategorieWhereInput>
    OR?: Enumerable<CategorieWhereInput>
    NOT?: Enumerable<CategorieWhereInput>
    id?: IntFilter | number
    nom?: StringFilter | string
    articles?: CategorieArticleListRelationFilter
  }

  export type CategorieOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    articles?: CategorieArticleOrderByRelationAggregateInput
  }

  export type CategorieWhereUniqueInput = {
    id?: number
  }

  export type CategorieOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    _count?: CategorieCountOrderByAggregateInput
    _avg?: CategorieAvgOrderByAggregateInput
    _max?: CategorieMaxOrderByAggregateInput
    _min?: CategorieMinOrderByAggregateInput
    _sum?: CategorieSumOrderByAggregateInput
  }

  export type CategorieScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategorieScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategorieScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategorieScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nom?: StringWithAggregatesFilter | string
  }

  export type CategorieArticleWhereInput = {
    AND?: Enumerable<CategorieArticleWhereInput>
    OR?: Enumerable<CategorieArticleWhereInput>
    NOT?: Enumerable<CategorieArticleWhereInput>
    articleID?: IntFilter | number
    categorieID?: IntFilter | number
    articles?: XOR<ArticleRelationFilter, ArticleWhereInput>
    categories?: XOR<CategorieRelationFilter, CategorieWhereInput>
  }

  export type CategorieArticleOrderByWithRelationInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
    articles?: ArticleOrderByWithRelationInput
    categories?: CategorieOrderByWithRelationInput
  }

  export type CategorieArticleWhereUniqueInput = {
    articleID_categorieID?: CategorieArticleArticleIDCategorieIDCompoundUniqueInput
  }

  export type CategorieArticleOrderByWithAggregationInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
    _count?: CategorieArticleCountOrderByAggregateInput
    _avg?: CategorieArticleAvgOrderByAggregateInput
    _max?: CategorieArticleMaxOrderByAggregateInput
    _min?: CategorieArticleMinOrderByAggregateInput
    _sum?: CategorieArticleSumOrderByAggregateInput
  }

  export type CategorieArticleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategorieArticleScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategorieArticleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategorieArticleScalarWhereWithAggregatesInput>
    articleID?: IntWithAggregatesFilter | number
    categorieID?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    nom: string
    email: string
    password: string
    role: Role
    articles?: ArticleCreateNestedManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: Role
    articles?: ArticleUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    articles?: ArticleUpdateManyWithoutAuthorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
    articles?: ArticleUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: Role
  }

  export type UserUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type ArticleCreateInput = {
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaires?: CommentaireCreateNestedManyWithoutArticleInput
    categories?: CategorieArticleCreateNestedManyWithoutArticlesInput
    author: UserCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateInput = {
    id?: number
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userID: number
    commentaires?: CommentaireUncheckedCreateNestedManyWithoutArticleInput
    categories?: CategorieArticleUncheckedCreateNestedManyWithoutArticlesInput
  }

  export type ArticleUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaires?: CommentaireUpdateManyWithoutArticleNestedInput
    categories?: CategorieArticleUpdateManyWithoutArticlesNestedInput
    author?: UserUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: IntFieldUpdateOperationsInput | number
    commentaires?: CommentaireUncheckedUpdateManyWithoutArticleNestedInput
    categories?: CategorieArticleUncheckedUpdateManyWithoutArticlesNestedInput
  }

  export type ArticleCreateManyInput = {
    id?: number
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userID: number
  }

  export type ArticleUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: IntFieldUpdateOperationsInput | number
  }

  export type CommentaireCreateInput = {
    email: string
    contenu: string
    article: ArticleCreateNestedOneWithoutCommentairesInput
  }

  export type CommentaireUncheckedCreateInput = {
    id?: number
    email: string
    contenu: string
    articleID: number
  }

  export type CommentaireUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    article?: ArticleUpdateOneRequiredWithoutCommentairesNestedInput
  }

  export type CommentaireUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    articleID?: IntFieldUpdateOperationsInput | number
  }

  export type CommentaireCreateManyInput = {
    id?: number
    email: string
    contenu: string
    articleID: number
  }

  export type CommentaireUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type CommentaireUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    articleID?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieCreateInput = {
    nom: string
    articles?: CategorieArticleCreateNestedManyWithoutCategoriesInput
  }

  export type CategorieUncheckedCreateInput = {
    id?: number
    nom: string
    articles?: CategorieArticleUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategorieUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    articles?: CategorieArticleUpdateManyWithoutCategoriesNestedInput
  }

  export type CategorieUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    articles?: CategorieArticleUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategorieCreateManyInput = {
    id?: number
    nom: string
  }

  export type CategorieUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CategorieUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CategorieArticleCreateInput = {
    articles: ArticleCreateNestedOneWithoutCategoriesInput
    categories: CategorieCreateNestedOneWithoutArticlesInput
  }

  export type CategorieArticleUncheckedCreateInput = {
    articleID: number
    categorieID: number
  }

  export type CategorieArticleUpdateInput = {
    articles?: ArticleUpdateOneRequiredWithoutCategoriesNestedInput
    categories?: CategorieUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type CategorieArticleUncheckedUpdateInput = {
    articleID?: IntFieldUpdateOperationsInput | number
    categorieID?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieArticleCreateManyInput = {
    articleID: number
    categorieID: number
  }

  export type CategorieArticleUpdateManyMutationInput = {

  }

  export type CategorieArticleUncheckedUpdateManyInput = {
    articleID?: IntFieldUpdateOperationsInput | number
    categorieID?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type EnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type ArticleListRelationFilter = {
    every?: ArticleWhereInput
    some?: ArticleWhereInput
    none?: ArticleWhereInput
  }

  export type ArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type EnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CommentaireListRelationFilter = {
    every?: CommentaireWhereInput
    some?: CommentaireWhereInput
    none?: CommentaireWhereInput
  }

  export type CategorieArticleListRelationFilter = {
    every?: CategorieArticleWhereInput
    some?: CategorieArticleWhereInput
    none?: CategorieArticleWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CommentaireOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategorieArticleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    image?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userID?: SortOrder
  }

  export type ArticleAvgOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    image?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userID?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    contenu?: SortOrder
    image?: SortOrder
    published?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userID?: SortOrder
  }

  export type ArticleSumOrderByAggregateInput = {
    id?: SortOrder
    userID?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ArticleRelationFilter = {
    is?: ArticleWhereInput
    isNot?: ArticleWhereInput
  }

  export type CommentaireCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    contenu?: SortOrder
    articleID?: SortOrder
  }

  export type CommentaireAvgOrderByAggregateInput = {
    id?: SortOrder
    articleID?: SortOrder
  }

  export type CommentaireMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    contenu?: SortOrder
    articleID?: SortOrder
  }

  export type CommentaireMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    contenu?: SortOrder
    articleID?: SortOrder
  }

  export type CommentaireSumOrderByAggregateInput = {
    id?: SortOrder
    articleID?: SortOrder
  }

  export type CategorieCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CategorieAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategorieMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CategorieMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
  }

  export type CategorieSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategorieRelationFilter = {
    is?: CategorieWhereInput
    isNot?: CategorieWhereInput
  }

  export type CategorieArticleArticleIDCategorieIDCompoundUniqueInput = {
    articleID: number
    categorieID: number
  }

  export type CategorieArticleCountOrderByAggregateInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
  }

  export type CategorieArticleAvgOrderByAggregateInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
  }

  export type CategorieArticleMaxOrderByAggregateInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
  }

  export type CategorieArticleMinOrderByAggregateInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
  }

  export type CategorieArticleSumOrderByAggregateInput = {
    articleID?: SortOrder
    categorieID?: SortOrder
  }

  export type ArticleCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutAuthorInput>, Enumerable<ArticleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutAuthorInput>
    createMany?: ArticleCreateManyAuthorInputEnvelope
    connect?: Enumerable<ArticleWhereUniqueInput>
  }

  export type ArticleUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutAuthorInput>, Enumerable<ArticleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutAuthorInput>
    createMany?: ArticleCreateManyAuthorInputEnvelope
    connect?: Enumerable<ArticleWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: Role
  }

  export type ArticleUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutAuthorInput>, Enumerable<ArticleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ArticleUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ArticleCreateManyAuthorInputEnvelope
    set?: Enumerable<ArticleWhereUniqueInput>
    disconnect?: Enumerable<ArticleWhereUniqueInput>
    delete?: Enumerable<ArticleWhereUniqueInput>
    connect?: Enumerable<ArticleWhereUniqueInput>
    update?: Enumerable<ArticleUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ArticleUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ArticleScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ArticleUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<ArticleCreateWithoutAuthorInput>, Enumerable<ArticleUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<ArticleCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<ArticleUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: ArticleCreateManyAuthorInputEnvelope
    set?: Enumerable<ArticleWhereUniqueInput>
    disconnect?: Enumerable<ArticleWhereUniqueInput>
    delete?: Enumerable<ArticleWhereUniqueInput>
    connect?: Enumerable<ArticleWhereUniqueInput>
    update?: Enumerable<ArticleUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<ArticleUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<ArticleScalarWhereInput>
  }

  export type CommentaireCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<CommentaireCreateWithoutArticleInput>, Enumerable<CommentaireUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentaireCreateOrConnectWithoutArticleInput>
    createMany?: CommentaireCreateManyArticleInputEnvelope
    connect?: Enumerable<CommentaireWhereUniqueInput>
  }

  export type CategorieArticleCreateNestedManyWithoutArticlesInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutArticlesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutArticlesInput>
    createMany?: CategorieArticleCreateManyArticlesInputEnvelope
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutArticlesInput = {
    create?: XOR<UserCreateWithoutArticlesInput, UserUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: UserCreateOrConnectWithoutArticlesInput
    connect?: UserWhereUniqueInput
  }

  export type CommentaireUncheckedCreateNestedManyWithoutArticleInput = {
    create?: XOR<Enumerable<CommentaireCreateWithoutArticleInput>, Enumerable<CommentaireUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentaireCreateOrConnectWithoutArticleInput>
    createMany?: CommentaireCreateManyArticleInputEnvelope
    connect?: Enumerable<CommentaireWhereUniqueInput>
  }

  export type CategorieArticleUncheckedCreateNestedManyWithoutArticlesInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutArticlesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutArticlesInput>
    createMany?: CategorieArticleCreateManyArticlesInputEnvelope
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CommentaireUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<CommentaireCreateWithoutArticleInput>, Enumerable<CommentaireUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentaireCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<CommentaireUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: CommentaireCreateManyArticleInputEnvelope
    set?: Enumerable<CommentaireWhereUniqueInput>
    disconnect?: Enumerable<CommentaireWhereUniqueInput>
    delete?: Enumerable<CommentaireWhereUniqueInput>
    connect?: Enumerable<CommentaireWhereUniqueInput>
    update?: Enumerable<CommentaireUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<CommentaireUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<CommentaireScalarWhereInput>
  }

  export type CategorieArticleUpdateManyWithoutArticlesNestedInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutArticlesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutArticlesInput>
    upsert?: Enumerable<CategorieArticleUpsertWithWhereUniqueWithoutArticlesInput>
    createMany?: CategorieArticleCreateManyArticlesInputEnvelope
    set?: Enumerable<CategorieArticleWhereUniqueInput>
    disconnect?: Enumerable<CategorieArticleWhereUniqueInput>
    delete?: Enumerable<CategorieArticleWhereUniqueInput>
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
    update?: Enumerable<CategorieArticleUpdateWithWhereUniqueWithoutArticlesInput>
    updateMany?: Enumerable<CategorieArticleUpdateManyWithWhereWithoutArticlesInput>
    deleteMany?: Enumerable<CategorieArticleScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<UserCreateWithoutArticlesInput, UserUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: UserCreateOrConnectWithoutArticlesInput
    upsert?: UserUpsertWithoutArticlesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutArticlesInput, UserUncheckedUpdateWithoutArticlesInput>
  }

  export type CommentaireUncheckedUpdateManyWithoutArticleNestedInput = {
    create?: XOR<Enumerable<CommentaireCreateWithoutArticleInput>, Enumerable<CommentaireUncheckedCreateWithoutArticleInput>>
    connectOrCreate?: Enumerable<CommentaireCreateOrConnectWithoutArticleInput>
    upsert?: Enumerable<CommentaireUpsertWithWhereUniqueWithoutArticleInput>
    createMany?: CommentaireCreateManyArticleInputEnvelope
    set?: Enumerable<CommentaireWhereUniqueInput>
    disconnect?: Enumerable<CommentaireWhereUniqueInput>
    delete?: Enumerable<CommentaireWhereUniqueInput>
    connect?: Enumerable<CommentaireWhereUniqueInput>
    update?: Enumerable<CommentaireUpdateWithWhereUniqueWithoutArticleInput>
    updateMany?: Enumerable<CommentaireUpdateManyWithWhereWithoutArticleInput>
    deleteMany?: Enumerable<CommentaireScalarWhereInput>
  }

  export type CategorieArticleUncheckedUpdateManyWithoutArticlesNestedInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutArticlesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutArticlesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutArticlesInput>
    upsert?: Enumerable<CategorieArticleUpsertWithWhereUniqueWithoutArticlesInput>
    createMany?: CategorieArticleCreateManyArticlesInputEnvelope
    set?: Enumerable<CategorieArticleWhereUniqueInput>
    disconnect?: Enumerable<CategorieArticleWhereUniqueInput>
    delete?: Enumerable<CategorieArticleWhereUniqueInput>
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
    update?: Enumerable<CategorieArticleUpdateWithWhereUniqueWithoutArticlesInput>
    updateMany?: Enumerable<CategorieArticleUpdateManyWithWhereWithoutArticlesInput>
    deleteMany?: Enumerable<CategorieArticleScalarWhereInput>
  }

  export type ArticleCreateNestedOneWithoutCommentairesInput = {
    create?: XOR<ArticleCreateWithoutCommentairesInput, ArticleUncheckedCreateWithoutCommentairesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCommentairesInput
    connect?: ArticleWhereUniqueInput
  }

  export type ArticleUpdateOneRequiredWithoutCommentairesNestedInput = {
    create?: XOR<ArticleCreateWithoutCommentairesInput, ArticleUncheckedCreateWithoutCommentairesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCommentairesInput
    upsert?: ArticleUpsertWithoutCommentairesInput
    connect?: ArticleWhereUniqueInput
    update?: XOR<ArticleUpdateWithoutCommentairesInput, ArticleUncheckedUpdateWithoutCommentairesInput>
  }

  export type CategorieArticleCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutCategoriesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutCategoriesInput>
    createMany?: CategorieArticleCreateManyCategoriesInputEnvelope
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
  }

  export type CategorieArticleUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutCategoriesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutCategoriesInput>
    createMany?: CategorieArticleCreateManyCategoriesInputEnvelope
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
  }

  export type CategorieArticleUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutCategoriesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<CategorieArticleUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: CategorieArticleCreateManyCategoriesInputEnvelope
    set?: Enumerable<CategorieArticleWhereUniqueInput>
    disconnect?: Enumerable<CategorieArticleWhereUniqueInput>
    delete?: Enumerable<CategorieArticleWhereUniqueInput>
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
    update?: Enumerable<CategorieArticleUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<CategorieArticleUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<CategorieArticleScalarWhereInput>
  }

  export type CategorieArticleUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<Enumerable<CategorieArticleCreateWithoutCategoriesInput>, Enumerable<CategorieArticleUncheckedCreateWithoutCategoriesInput>>
    connectOrCreate?: Enumerable<CategorieArticleCreateOrConnectWithoutCategoriesInput>
    upsert?: Enumerable<CategorieArticleUpsertWithWhereUniqueWithoutCategoriesInput>
    createMany?: CategorieArticleCreateManyCategoriesInputEnvelope
    set?: Enumerable<CategorieArticleWhereUniqueInput>
    disconnect?: Enumerable<CategorieArticleWhereUniqueInput>
    delete?: Enumerable<CategorieArticleWhereUniqueInput>
    connect?: Enumerable<CategorieArticleWhereUniqueInput>
    update?: Enumerable<CategorieArticleUpdateWithWhereUniqueWithoutCategoriesInput>
    updateMany?: Enumerable<CategorieArticleUpdateManyWithWhereWithoutCategoriesInput>
    deleteMany?: Enumerable<CategorieArticleScalarWhereInput>
  }

  export type ArticleCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoriesInput
    connect?: ArticleWhereUniqueInput
  }

  export type CategorieCreateNestedOneWithoutArticlesInput = {
    create?: XOR<CategorieCreateWithoutArticlesInput, CategorieUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutArticlesInput
    connect?: CategorieWhereUniqueInput
  }

  export type ArticleUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: ArticleCreateOrConnectWithoutCategoriesInput
    upsert?: ArticleUpsertWithoutCategoriesInput
    connect?: ArticleWhereUniqueInput
    update?: XOR<ArticleUpdateWithoutCategoriesInput, ArticleUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategorieUpdateOneRequiredWithoutArticlesNestedInput = {
    create?: XOR<CategorieCreateWithoutArticlesInput, CategorieUncheckedCreateWithoutArticlesInput>
    connectOrCreate?: CategorieCreateOrConnectWithoutArticlesInput
    upsert?: CategorieUpsertWithoutArticlesInput
    connect?: CategorieWhereUniqueInput
    update?: XOR<CategorieUpdateWithoutArticlesInput, CategorieUncheckedUpdateWithoutArticlesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumRoleFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleFilter | Role
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedEnumRoleWithAggregatesFilter = {
    equals?: Role
    in?: Enumerable<Role>
    notIn?: Enumerable<Role>
    not?: NestedEnumRoleWithAggregatesFilter | Role
    _count?: NestedIntFilter
    _min?: NestedEnumRoleFilter
    _max?: NestedEnumRoleFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type ArticleCreateWithoutAuthorInput = {
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaires?: CommentaireCreateNestedManyWithoutArticleInput
    categories?: CategorieArticleCreateNestedManyWithoutArticlesInput
  }

  export type ArticleUncheckedCreateWithoutAuthorInput = {
    id?: number
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaires?: CommentaireUncheckedCreateNestedManyWithoutArticleInput
    categories?: CategorieArticleUncheckedCreateNestedManyWithoutArticlesInput
  }

  export type ArticleCreateOrConnectWithoutAuthorInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutAuthorInput, ArticleUncheckedCreateWithoutAuthorInput>
  }

  export type ArticleCreateManyAuthorInputEnvelope = {
    data: Enumerable<ArticleCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type ArticleUpsertWithWhereUniqueWithoutAuthorInput = {
    where: ArticleWhereUniqueInput
    update: XOR<ArticleUpdateWithoutAuthorInput, ArticleUncheckedUpdateWithoutAuthorInput>
    create: XOR<ArticleCreateWithoutAuthorInput, ArticleUncheckedCreateWithoutAuthorInput>
  }

  export type ArticleUpdateWithWhereUniqueWithoutAuthorInput = {
    where: ArticleWhereUniqueInput
    data: XOR<ArticleUpdateWithoutAuthorInput, ArticleUncheckedUpdateWithoutAuthorInput>
  }

  export type ArticleUpdateManyWithWhereWithoutAuthorInput = {
    where: ArticleScalarWhereInput
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyWithoutArticlesInput>
  }

  export type ArticleScalarWhereInput = {
    AND?: Enumerable<ArticleScalarWhereInput>
    OR?: Enumerable<ArticleScalarWhereInput>
    NOT?: Enumerable<ArticleScalarWhereInput>
    id?: IntFilter | number
    titre?: StringFilter | string
    contenu?: StringFilter | string
    image?: StringNullableFilter | string | null
    published?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    userID?: IntFilter | number
  }

  export type CommentaireCreateWithoutArticleInput = {
    email: string
    contenu: string
  }

  export type CommentaireUncheckedCreateWithoutArticleInput = {
    id?: number
    email: string
    contenu: string
  }

  export type CommentaireCreateOrConnectWithoutArticleInput = {
    where: CommentaireWhereUniqueInput
    create: XOR<CommentaireCreateWithoutArticleInput, CommentaireUncheckedCreateWithoutArticleInput>
  }

  export type CommentaireCreateManyArticleInputEnvelope = {
    data: Enumerable<CommentaireCreateManyArticleInput>
    skipDuplicates?: boolean
  }

  export type CategorieArticleCreateWithoutArticlesInput = {
    categories: CategorieCreateNestedOneWithoutArticlesInput
  }

  export type CategorieArticleUncheckedCreateWithoutArticlesInput = {
    categorieID: number
  }

  export type CategorieArticleCreateOrConnectWithoutArticlesInput = {
    where: CategorieArticleWhereUniqueInput
    create: XOR<CategorieArticleCreateWithoutArticlesInput, CategorieArticleUncheckedCreateWithoutArticlesInput>
  }

  export type CategorieArticleCreateManyArticlesInputEnvelope = {
    data: Enumerable<CategorieArticleCreateManyArticlesInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutArticlesInput = {
    nom: string
    email: string
    password: string
    role: Role
  }

  export type UserUncheckedCreateWithoutArticlesInput = {
    id?: number
    nom: string
    email: string
    password: string
    role: Role
  }

  export type UserCreateOrConnectWithoutArticlesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutArticlesInput, UserUncheckedCreateWithoutArticlesInput>
  }

  export type CommentaireUpsertWithWhereUniqueWithoutArticleInput = {
    where: CommentaireWhereUniqueInput
    update: XOR<CommentaireUpdateWithoutArticleInput, CommentaireUncheckedUpdateWithoutArticleInput>
    create: XOR<CommentaireCreateWithoutArticleInput, CommentaireUncheckedCreateWithoutArticleInput>
  }

  export type CommentaireUpdateWithWhereUniqueWithoutArticleInput = {
    where: CommentaireWhereUniqueInput
    data: XOR<CommentaireUpdateWithoutArticleInput, CommentaireUncheckedUpdateWithoutArticleInput>
  }

  export type CommentaireUpdateManyWithWhereWithoutArticleInput = {
    where: CommentaireScalarWhereInput
    data: XOR<CommentaireUpdateManyMutationInput, CommentaireUncheckedUpdateManyWithoutCommentairesInput>
  }

  export type CommentaireScalarWhereInput = {
    AND?: Enumerable<CommentaireScalarWhereInput>
    OR?: Enumerable<CommentaireScalarWhereInput>
    NOT?: Enumerable<CommentaireScalarWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    contenu?: StringFilter | string
    articleID?: IntFilter | number
  }

  export type CategorieArticleUpsertWithWhereUniqueWithoutArticlesInput = {
    where: CategorieArticleWhereUniqueInput
    update: XOR<CategorieArticleUpdateWithoutArticlesInput, CategorieArticleUncheckedUpdateWithoutArticlesInput>
    create: XOR<CategorieArticleCreateWithoutArticlesInput, CategorieArticleUncheckedCreateWithoutArticlesInput>
  }

  export type CategorieArticleUpdateWithWhereUniqueWithoutArticlesInput = {
    where: CategorieArticleWhereUniqueInput
    data: XOR<CategorieArticleUpdateWithoutArticlesInput, CategorieArticleUncheckedUpdateWithoutArticlesInput>
  }

  export type CategorieArticleUpdateManyWithWhereWithoutArticlesInput = {
    where: CategorieArticleScalarWhereInput
    data: XOR<CategorieArticleUpdateManyMutationInput, CategorieArticleUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategorieArticleScalarWhereInput = {
    AND?: Enumerable<CategorieArticleScalarWhereInput>
    OR?: Enumerable<CategorieArticleScalarWhereInput>
    NOT?: Enumerable<CategorieArticleScalarWhereInput>
    articleID?: IntFilter | number
    categorieID?: IntFilter | number
  }

  export type UserUpsertWithoutArticlesInput = {
    update: XOR<UserUpdateWithoutArticlesInput, UserUncheckedUpdateWithoutArticlesInput>
    create: XOR<UserCreateWithoutArticlesInput, UserUncheckedCreateWithoutArticlesInput>
  }

  export type UserUpdateWithoutArticlesInput = {
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type UserUncheckedUpdateWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | Role
  }

  export type ArticleCreateWithoutCommentairesInput = {
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: CategorieArticleCreateNestedManyWithoutArticlesInput
    author: UserCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateWithoutCommentairesInput = {
    id?: number
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userID: number
    categories?: CategorieArticleUncheckedCreateNestedManyWithoutArticlesInput
  }

  export type ArticleCreateOrConnectWithoutCommentairesInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutCommentairesInput, ArticleUncheckedCreateWithoutCommentairesInput>
  }

  export type ArticleUpsertWithoutCommentairesInput = {
    update: XOR<ArticleUpdateWithoutCommentairesInput, ArticleUncheckedUpdateWithoutCommentairesInput>
    create: XOR<ArticleCreateWithoutCommentairesInput, ArticleUncheckedCreateWithoutCommentairesInput>
  }

  export type ArticleUpdateWithoutCommentairesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: CategorieArticleUpdateManyWithoutArticlesNestedInput
    author?: UserUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateWithoutCommentairesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: IntFieldUpdateOperationsInput | number
    categories?: CategorieArticleUncheckedUpdateManyWithoutArticlesNestedInput
  }

  export type CategorieArticleCreateWithoutCategoriesInput = {
    articles: ArticleCreateNestedOneWithoutCategoriesInput
  }

  export type CategorieArticleUncheckedCreateWithoutCategoriesInput = {
    articleID: number
  }

  export type CategorieArticleCreateOrConnectWithoutCategoriesInput = {
    where: CategorieArticleWhereUniqueInput
    create: XOR<CategorieArticleCreateWithoutCategoriesInput, CategorieArticleUncheckedCreateWithoutCategoriesInput>
  }

  export type CategorieArticleCreateManyCategoriesInputEnvelope = {
    data: Enumerable<CategorieArticleCreateManyCategoriesInput>
    skipDuplicates?: boolean
  }

  export type CategorieArticleUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: CategorieArticleWhereUniqueInput
    update: XOR<CategorieArticleUpdateWithoutCategoriesInput, CategorieArticleUncheckedUpdateWithoutCategoriesInput>
    create: XOR<CategorieArticleCreateWithoutCategoriesInput, CategorieArticleUncheckedCreateWithoutCategoriesInput>
  }

  export type CategorieArticleUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: CategorieArticleWhereUniqueInput
    data: XOR<CategorieArticleUpdateWithoutCategoriesInput, CategorieArticleUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategorieArticleUpdateManyWithWhereWithoutCategoriesInput = {
    where: CategorieArticleScalarWhereInput
    data: XOR<CategorieArticleUpdateManyMutationInput, CategorieArticleUncheckedUpdateManyWithoutArticlesInput>
  }

  export type ArticleCreateWithoutCategoriesInput = {
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    commentaires?: CommentaireCreateNestedManyWithoutArticleInput
    author: UserCreateNestedOneWithoutArticlesInput
  }

  export type ArticleUncheckedCreateWithoutCategoriesInput = {
    id?: number
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    userID: number
    commentaires?: CommentaireUncheckedCreateNestedManyWithoutArticleInput
  }

  export type ArticleCreateOrConnectWithoutCategoriesInput = {
    where: ArticleWhereUniqueInput
    create: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
  }

  export type CategorieCreateWithoutArticlesInput = {
    nom: string
  }

  export type CategorieUncheckedCreateWithoutArticlesInput = {
    id?: number
    nom: string
  }

  export type CategorieCreateOrConnectWithoutArticlesInput = {
    where: CategorieWhereUniqueInput
    create: XOR<CategorieCreateWithoutArticlesInput, CategorieUncheckedCreateWithoutArticlesInput>
  }

  export type ArticleUpsertWithoutCategoriesInput = {
    update: XOR<ArticleUpdateWithoutCategoriesInput, ArticleUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ArticleCreateWithoutCategoriesInput, ArticleUncheckedCreateWithoutCategoriesInput>
  }

  export type ArticleUpdateWithoutCategoriesInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaires?: CommentaireUpdateManyWithoutArticleNestedInput
    author?: UserUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userID?: IntFieldUpdateOperationsInput | number
    commentaires?: CommentaireUncheckedUpdateManyWithoutArticleNestedInput
  }

  export type CategorieUpsertWithoutArticlesInput = {
    update: XOR<CategorieUpdateWithoutArticlesInput, CategorieUncheckedUpdateWithoutArticlesInput>
    create: XOR<CategorieCreateWithoutArticlesInput, CategorieUncheckedCreateWithoutArticlesInput>
  }

  export type CategorieUpdateWithoutArticlesInput = {
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type CategorieUncheckedUpdateWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
  }

  export type ArticleCreateManyAuthorInput = {
    id?: number
    titre: string
    contenu: string
    image?: string | null
    published: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateWithoutAuthorInput = {
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaires?: CommentaireUpdateManyWithoutArticleNestedInput
    categories?: CategorieArticleUpdateManyWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    commentaires?: CommentaireUncheckedUpdateManyWithoutArticleNestedInput
    categories?: CategorieArticleUncheckedUpdateManyWithoutArticlesNestedInput
  }

  export type ArticleUncheckedUpdateManyWithoutArticlesInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    published?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentaireCreateManyArticleInput = {
    id?: number
    email: string
    contenu: string
  }

  export type CategorieArticleCreateManyArticlesInput = {
    categorieID: number
  }

  export type CommentaireUpdateWithoutArticleInput = {
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type CommentaireUncheckedUpdateWithoutArticleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type CommentaireUncheckedUpdateManyWithoutCommentairesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    contenu?: StringFieldUpdateOperationsInput | string
  }

  export type CategorieArticleUpdateWithoutArticlesInput = {
    categories?: CategorieUpdateOneRequiredWithoutArticlesNestedInput
  }

  export type CategorieArticleUncheckedUpdateWithoutArticlesInput = {
    categorieID?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieArticleUncheckedUpdateManyWithoutCategoriesInput = {
    categorieID?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieArticleCreateManyCategoriesInput = {
    articleID: number
  }

  export type CategorieArticleUpdateWithoutCategoriesInput = {
    articles?: ArticleUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type CategorieArticleUncheckedUpdateWithoutCategoriesInput = {
    articleID?: IntFieldUpdateOperationsInput | number
  }

  export type CategorieArticleUncheckedUpdateManyWithoutArticlesInput = {
    articleID?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}